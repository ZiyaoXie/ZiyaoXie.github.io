<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gin on 提笔忘字</title><link>https://imx.ink/gin/</link><description>Recent content in Gin on 提笔忘字</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>Copyright © 2023, Xie Ziyao.</copyright><lastBuildDate>Tue, 05 Mar 2024 20:00:00 +0800</lastBuildDate><atom:link href="https://imx.ink/gin/index.xml" rel="self" type="application/rss+xml"/><item><title>Gin 框架的 Web 服务流程</title><link>https://imx.ink/tech/2024/03/05/go-language-gin-framework/</link><pubDate>Tue, 05 Mar 2024 20:00:00 +0800</pubDate><guid>https://imx.ink/tech/2024/03/05/go-language-gin-framework/</guid><description>Go 标准库 net/http 提供了基础的 Web 功能，即监听端口，映射静态路由，解析 HTTP 报文。一些 Web 开发中简单的需求并不支持，需要更强大的框架实现：
动态路由：例如 hello/:name，hello/* 这类的规则； 鉴权：没有分组/统一鉴权的能力，需要在每个路由映射的handler中实现； 模板：没有统一简化的HTML机制； &amp;hellip; gin 是一个应用广泛的 Go 语言 Web 框架框架，它基于 htttprouter 实现最重要的路由模块，采用类似字典树一样的数据结构来存储路由与 handle 方法的映射。
Go 语言 Web 服务流程 使用 go 语言内置的 net 包启动的一个 web 服务：
func main() { // 注册一个服务 http.HandleFunc(&amp;#34;/hello&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;Hello, %q&amp;#34;, html.EscapeString(r.URL.Path)) }) // 监听 8080 端口 log.Fatal(http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil)) } 当执行上面的服务 go run main.go 时，此时在 ListenAndServe 方法会先创建一个 Server{Addr: addr, Handler: handler} 结构：</description></item></channel></rss>